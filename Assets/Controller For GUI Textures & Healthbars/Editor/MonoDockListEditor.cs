using UnityEngine;using System.Collections;using UnityEditor;[CustomEditor(typeof(MonoDockList))]public class MonoDockListEditor : Editor {    private MonoDockList monoDockList;    private Object prefab;    private string newPrefabName = "NewPrefab";    private string prefabFolder = "Assets/Prefabs";	// Use this for initialization    void OnEnable()    {        monoDockList = (MonoDockList)target;        prefab = PrefabUtility.GetPrefabParent(target);	}		// Update is called once per frame    public override void OnInspectorGUI()    {        EditorGUILayout.Space();        monoDockList.DockStyle = (DockStyle)EditorGUILayout.EnumPopup("Dock Area", monoDockList.DockStyle);        monoDockList.OrderStyle = (OrderStyle)EditorGUILayout.EnumPopup("Order Style", monoDockList.OrderStyle);        EditorGUILayout.Space();        if (Event.current.type == EventType.ValidateCommand               && Event.current.commandName == "UndoRedoPerformed")        {            // Undo/redo was performed. Repaint.            Repaint();        }        EditorGUILayout.Space();        Separator();        EditorGUILayout.Space();        GUILayout.BeginHorizontal();        if (prefab != null)        {            GUIStyle overwriteButtonStyle = new GUIStyle(GUI.skin.button);            overwriteButtonStyle.fontStyle = FontStyle.Bold;            overwriteButtonStyle.padding = new RectOffset(0, 0, 10, 10);            if (GUILayout.Button("Overwrite Existing Prefab", overwriteButtonStyle)                    && EditorUtility.DisplayDialog("Are you sure?"                    , "This will permanently change your prefab."                    , "Yes"                    , "No"))            {                if (prefab == null)                {                    Debug.LogWarning("Prefab not found!");                    return;                }                PrefabUtility.ReplacePrefab(monoDockList.gameObject, prefab, ReplacePrefabOptions.ReplaceNameBased);            }        }        GUILayout.EndHorizontal();        GUILayout.Space(5);        GUILayout.BeginHorizontal();        GUIStyle buttonStyle = new GUIStyle(GUI.skin.button);        buttonStyle.padding = new RectOffset(8, 8, 4, 5);        if (GUILayout.Button("Create New Prefab", buttonStyle))        {            if (prefabFolder == "")            {                prefabFolder = EditorUtility.OpenFolderPanel("Prefab Folder", "Assets", "Prefabs");            }            prefabFolder = EditorUtility.OpenFolderPanel("Prefab Folder", "Assets", "Prefabs");            string tmp = System.Text.RegularExpressions.Regex.Split(prefabFolder, "/Assets")[1];            string path = "Assets" + tmp + "/" + newPrefabName + ".prefab";            Object newPrefab = PrefabUtility.CreateEmptyPrefab(path);            if (newPrefab == null)            {                Debug.LogError("Couldn't Create the Asset. Path: " + path);                return;            }            PrefabUtility.ReplacePrefab(monoDockList.gameObject, newPrefab, ReplacePrefabOptions.ReplaceNameBased);            Debug.Log("Prefab Succefully Created. (" + path + ")");        }        GUIStyle style = new GUIStyle(GUI.skin.textField);        style.fontStyle = FontStyle.Normal;        style.alignment = TextAnchor.MiddleLeft;        style.padding = new RectOffset(5, 3, 2, 3);        style.fixedHeight = 22;        newPrefabName = EditorGUILayout.TextField(newPrefabName, style);        GUILayout.EndHorizontal();        EditorGUILayout.Space();	}    void Separator()    {        GUILayout.Box("", GUILayout.Width(Screen.width - 10), GUILayout.Height(3));    }}